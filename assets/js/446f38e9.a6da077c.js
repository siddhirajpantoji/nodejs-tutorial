"use strict";(self.webpackChunknode_tutorial=self.webpackChunknode_tutorial||[]).push([[361],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return t?o.createElement(h,l(l({ref:n},d),{},{components:t})):o.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var o=t(7462),a=(t(7294),t(3905));const i={id:"loops",title:"Loops While , Do While",sidebar_label:"Loops",slug:"/loops"},l="Loops: while and for",r={unversionedId:"Basics/loops",id:"Basics/loops",title:"Loops While , Do While",description:"We often need to repeat actions.",source:"@site/docs/Basics/loops.md",sourceDirName:"Basics",slug:"/loops",permalink:"/nodejs-tutorial/docs/loops",draft:!1,tags:[],version:"current",frontMatter:{id:"loops",title:"Loops While , Do While",sidebar_label:"Loops",slug:"/loops"},sidebar:"tutorialSidebar",previous:{title:"Logical Operators",permalink:"/nodejs-tutorial/docs/logical-operators"},next:{title:"Switch case",permalink:"/nodejs-tutorial/docs/switch"}},p={},s=[{value:"The &quot;while&quot; loop",id:"the-while-loop",level:2},{value:"The &quot;do..while&quot; loop",id:"the-dowhile-loop",level:2},{value:"The &quot;for&quot; loop",id:"the-for-loop",level:2},{value:"Skipping parts",id:"skipping-parts",level:3},{value:"Breaking the loop",id:"breaking-the-loop",level:2},{value:"Continue to the next iteration",id:"continue-to-the-next-iteration",level:2},{value:"Summary",id:"summary",level:2},{value:"Test your knowledge",id:"test-your-knowledge",level:2}],d={toc:s},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loops-while-and-for"},"Loops: while and for"),(0,a.kt)("p",null,"We often need to repeat actions."),(0,a.kt)("p",null,"For example, outputting goods from a list one after another or just running the same code for each number from 1 to 10."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Loops")," are a way to repeat the same code multiple times."),(0,a.kt)("admonition",{title:'The for..of and for..in loops"',type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A small announcement for advanced readers."),(0,a.kt)("p",{parentName:"admonition"},"This article covers only basic loops: ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"do..while")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"for(..;..;..)"),"."),(0,a.kt)("p",{parentName:"admonition"},"If you came to this article searching for other types of loops, here are the pointers:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"See for..in  to loop over object properties."),(0,a.kt)("li",{parentName:"ul"},"See for..of  and  iterables for looping over arrays and iterable objects.")),(0,a.kt)("p",{parentName:"admonition"},"Otherwise, please read on.")),(0,a.kt)("h2",{id:"the-while-loop"},'The "while" loop'),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," loop has the following syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'while (condition) {\n  // code\n  // so-called "loop body"\n}\n')),(0,a.kt)("p",null,"While the ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," is truthy, the ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," from the loop body is executed."),(0,a.kt)("p",null,"For instance, the loop below outputs ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," while ",(0,a.kt)("inlineCode",{parentName:"p"},"i < 3"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"let i = 0;\nwhile (i < 3) { // shows 0, then 1, then 2\n  console.log( i );\n  i++;\n}\n")),(0,a.kt)("p",null,"A single execution of the loop body is called ",(0,a.kt)("em",{parentName:"p"},"an iteration"),". The loop in the example above makes three iterations."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"i++")," was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process."),(0,a.kt)("p",null,"Any expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by ",(0,a.kt)("inlineCode",{parentName:"p"},"while"),"."),(0,a.kt)("p",null,"For instance, a shorter way to write ",(0,a.kt)("inlineCode",{parentName:"p"},"while (i != 0)")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"while (i)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let i = 3;\n// highlight-next-line\nwhile (i) { // when i becomes 0, the condition becomes falsy, and the loop stops\n  console.log( i );\n  i--;\n}    \n")),(0,a.kt)("admonition",{title:'Curly braces are not required for a single-line body"',type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If the loop body has a single statement, we can omit the curly braces ",(0,a.kt)("inlineCode",{parentName:"p"},"{\u2026}"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"let i = 3;\n// highlight-next-line\nwhile (i) console.log(i--);\n"))),(0,a.kt)("h2",{id:"the-dowhile-loop"},'The "do..while" loop'),(0,a.kt)("p",null,"The condition check can be moved ",(0,a.kt)("em",{parentName:"p"},"below")," the loop body using the ",(0,a.kt)("inlineCode",{parentName:"p"},"do..while")," syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"do {\n  // loop body\n} while (condition);\n")),(0,a.kt)("p",null,"The loop will first execute the body, then check the condition, and, while it's truthy, execute it again and again."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"let i = 0;\ndo {\n  console.log( i );\n  i++;\n} while (i < 3);\n")),(0,a.kt)("p",null,"This form of syntax should only be used when you want the body of the loop to execute ",(0,a.kt)("strong",{parentName:"p"},"at least once")," regardless of the condition being truthy. Usually, the other form is preferred: ",(0,a.kt)("inlineCode",{parentName:"p"},"while(\u2026) {\u2026}"),"."),(0,a.kt)("h2",{id:"the-for-loop"},'The "for" loop'),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," loop is more complex, but it's also the most commonly used loop."),(0,a.kt)("p",null,"It looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (begin; condition; step) {\n  // ... loop body ...\n}\n")),(0,a.kt)("p",null,"Let's learn the meaning of these parts by example. The loop below runs ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log(i)")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," up to (but not including) ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < 3; i++) { // shows 0, then 1, then 2\n  console.log(i);\n}\n")),(0,a.kt)("p",null,"Let's examine the ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," statement part-by-part:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"part"),(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"begin"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"let i = 0")),(0,a.kt)("td",{parentName:"tr",align:null},"Executes once upon entering the loop.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"condition"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"i < 3")),(0,a.kt)("td",{parentName:"tr",align:null},"Checked before every loop iteration. If false, the loop stops.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"body"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"console.log(i)")),(0,a.kt)("td",{parentName:"tr",align:null},"Runs again and again while the condition is truthy.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"step"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"i++")),(0,a.kt)("td",{parentName:"tr",align:null},"Executes after the body on each iteration.")))),(0,a.kt)("p",null,"The general loop algorithm works like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Run begin\n\u2192 (if condition \u2192 run body and run step)\n\u2192 (if condition \u2192 run body and run step)\n\u2192 (if condition \u2192 run body and run step)\n\u2192 ...\n")),(0,a.kt)("p",null,"That is, ",(0,a.kt)("inlineCode",{parentName:"p"},"begin")," executes once, and then it iterates: after each ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," test, ",(0,a.kt)("inlineCode",{parentName:"p"},"body")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," are executed."),(0,a.kt)("p",null,"If you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper."),(0,a.kt)("p",null,"Here's exactly what happens in our case:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// for (let i = 0; i < 3; i++) console.log(i)\n\n// run begin\nlet i = 0\n// if condition \u2192 run body and run step\nif (i < 3) { console.log(i); i++ }\n// if condition \u2192 run body and run step\nif (i < 3) { console.log(i); i++ }\n// if condition \u2192 run body and run step\nif (i < 3) { console.log(i); i++ }\n// ...finish, because now i == 3\n")),(0,a.kt)("admonition",{title:"Inline variable declaration",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},'Here, the "counter" variable ',(0,a.kt)("inlineCode",{parentName:"p"},"i"),' is declared right in the loop. This is called an "inline" variable declaration. Such variables are visible only inside the loop.'),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"// highlight-next-line\nfor (let i = 0; i < 3; i++) {\n  console.log(i); // 0, 1, 2\n}\n// error-next-line\nconsole.log(i); // error, no such variable\n")),(0,a.kt)("p",{parentName:"admonition"},"Instead of defining a variable, we could use an existing one:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"let i = 0;\n\nfor (i = 0; i < 3; i++) { // use an existing variable\n  console.log(i); // 0, 1, 2\n}\n\nconsole.log(i); // 3, visible, because declared outside of the loop\n"))),(0,a.kt)("h3",{id:"skipping-parts"},"Skipping parts"),(0,a.kt)("p",null,"Any part of ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," can be skipped."),(0,a.kt)("p",null,"For example, we can omit ",(0,a.kt)("inlineCode",{parentName:"p"},"begin")," if we don't need to do anything at the loop start."),(0,a.kt)("p",null,"Like here:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let i = 0; // we have i already declared and assigned\n\nfor (; i < 3; i++) { // no need for "begin"\n  console.log( i ); // 0, 1, 2\n}\n')),(0,a.kt)("p",null,"We can also remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," part:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let i = 0;\n\nfor (; i < 3;) {\n  console.log( i++ );\n}\n")),(0,a.kt)("p",null,"This makes the loop identical to ",(0,a.kt)("inlineCode",{parentName:"p"},"while (i < 3)"),"."),(0,a.kt)("p",null,"We can actually remove everything, creating an infinite loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (;;) {\n  // repeats without limits\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Please note that the two ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," semicolons ",(0,a.kt)("inlineCode",{parentName:"p"},";")," must be present. Otherwise, there would be a syntax error.")),(0,a.kt)("h2",{id:"breaking-the-loop"},"Breaking the loop"),(0,a.kt)("p",null,"Normally, a loop exits when its condition becomes falsy."),(0,a.kt)("p",null,"But we can force the exit at any time using the special ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," directive."),(0,a.kt)("p",null,'For example, the loop below expects input from user while running code  for a series of numbers, "breaking" when no number is entered:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let sum = 0;\n\nwhile (true) {\n\n  let value = process.argv[2]\n\n// highlight-next-line\n  if (!value) break; // (*)\n\n  sum += value;\n\n}\nconsole.log( 'Sum: ' + sum );\n")),(0,a.kt)("p",null,"Sample code will be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/siddhirajpantoji/nodejs-tutorial/blob/main/static/code-snippets/loops/break-example.js"},"here"),"\nWhen you will execute this with below command "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"node break-example.js \n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," directive is activated at the line ",(0,a.kt)("inlineCode",{parentName:"p"},"(*)")," if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely, ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log"),"."),(0,a.kt)("p",null,'The combination "infinite loop + ',(0,a.kt)("inlineCode",{parentName:"p"},"break")," as needed\" is great for situations when a loop's condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body."),(0,a.kt)("admonition",{title:"Accepting Value from user",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Code above accepts value from user using ",(0,a.kt)("inlineCode",{parentName:"p"},"process.argv[2]"),". User can pass values as shown below by running code and passing arguments to program"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"node break-example.js 2\n")),(0,a.kt)("p",{parentName:"admonition"},"This will run your code indefinitely as no exit value has been specified. Kill the terminal to exit or stop the process ")),(0,a.kt)("h2",{id:"continue-to-the-next-iteration"},"Continue to the next iteration"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"continue"),' directive is a "lighter version" of ',(0,a.kt)("inlineCode",{parentName:"p"},"break"),". It doesn't stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows)."),(0,a.kt)("p",null,"We can use it if we're done with the current iteration and would like to move on to the next one."),(0,a.kt)("p",null,"The loop below uses ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," to output only odd values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < 10; i++) {\n\n  // if true, skip the remaining part of the body\n  // highlight-next-line\n  if (i % 2 == 0) continue;\n\n  console.log(i); // 1, then 3, 5, 7, 9\n}\n")),(0,a.kt)("p",null,"For even values of ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," directive stops executing the body and passes control to the next iteration of ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," (with the next number). So the ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log")," is only called for odd values."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"continue")," directive helps decrease nesting"),(0,a.kt)("p",{parentName:"admonition"},"A loop that shows odd values could look like this:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < 10; i++) {\n\n  if (i % 2) {\n    console.log( i );\n  }\n\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"From a technical point of view, this is identical to the example above. Surely, we can just wrap the code in an ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," block instead of using ",(0,a.kt)("inlineCode",{parentName:"p"},"continue"),"."),(0,a.kt)("p",{parentName:"admonition"},"But as a side effect, this created one more level of nesting (the ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log")," call inside the curly braces). If the code inside of ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," is longer than a few lines, that may decrease the overall readability.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"No ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"break/continue")," to the right side of '?'"),(0,a.kt)("p",{parentName:"admonition"},"Please note that syntax constructs that are not expressions cannot be used with the ternary operator ",(0,a.kt)("inlineCode",{parentName:"p"},"?"),". In particular, directives such as ",(0,a.kt)("inlineCode",{parentName:"p"},"break/continue")," aren't allowed there."),(0,a.kt)("p",{parentName:"admonition"},"For example, if we take this code:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (i > 5) {\n  console.log(i);\n} else {\n  continue;\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"...and rewrite it using a question mark:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"//error-next-line\n(i > 5) ? console.log(i) : continue; // continue isn't allowed here\n")),(0,a.kt)("p",{parentName:"admonition"},"...it stops working: there's a syntax error."),(0,a.kt)("p",{parentName:"admonition"},"This is just another reason not to use the question mark operator ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),".")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"We covered 3 types of loops:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"while")," -- The condition is checked before each iteration."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"do..while")," -- The condition is checked after each iteration."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"for (;;)")," -- The condition is checked before each iteration, additional settings available.")),(0,a.kt)("p",null,'To make an "infinite" loop, usually the ',(0,a.kt)("inlineCode",{parentName:"p"},"while(true)")," construct is used. Such a loop, just like any other, can be stopped with the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," directive."),(0,a.kt)("p",null,"If we don't want to do anything in the current iteration and would like to forward to the next one, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," directive."),(0,a.kt)("h2",{id:"test-your-knowledge"},"Test your knowledge"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Accept input from user as a number and print all odd numbers till that number "),(0,a.kt)("li",{parentName:"ol"},"Accept num of lines from user and print below pattern ( Considering number as 5 )")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*\n* *\n* * *\n* * * *\n* * * * *\n\n* * * * *\n* * * *\n* * *\n* *\n*\n\n        *\n      * *\n    * * *\n  * * * *\n* * * * *\n\n* * * * *\n  * * * *\n    * * *\n      * *\n        *\n\n\n")))}c.isMDXComponent=!0}}]);