"use strict";(self.webpackChunknode_tutorial=self.webpackChunknode_tutorial||[]).push([[958],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={id:"type-conversions",title:"Type Conversions",sidebar_label:"Type Conversions",slug:"/type-conversions"},o="Type Conversions",i={unversionedId:"Basics/type-conversions",id:"Basics/type-conversions",title:"Type Conversions",description:"Most of the time, operators and functions automatically convert the values given to them to the right type.",source:"@site/docs/Basics/type-conversions.md",sourceDirName:"Basics",slug:"/type-conversions",permalink:"/nodejs-tutorial/docs/type-conversions",draft:!1,tags:[],version:"current",frontMatter:{id:"type-conversions",title:"Type Conversions",sidebar_label:"Type Conversions",slug:"/type-conversions"},sidebar:"tutorialSidebar",previous:{title:"Data Types",permalink:"/nodejs-tutorial/docs/data-types"},next:{title:"Operators",permalink:"/nodejs-tutorial/docs/operators"}},s={},p=[{value:"String Conversion",id:"string-conversion",level:2},{value:"Numeric Conversion",id:"numeric-conversion",level:2},{value:"Boolean Conversion",id:"boolean-conversion",level:2},{value:"Summary",id:"summary",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"type-conversions"},"Type Conversions"),(0,r.kt)("p",null,"Most of the time, operators and functions automatically convert the values given to them to the right type."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," automatically converts any value to a string to show it. Mathematical operations convert values to numbers."),(0,r.kt)("p",null,"There are also cases when we need to explicitly convert a value to the expected type."),(0,r.kt)("admonition",{title:"Not talking about objects yet",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In this chapter, we won't cover objects. For now, we'll just be talking about primitives."),(0,r.kt)("p",{parentName:"admonition"},"Later, after we learn about objects, in the chapter  later we'll see how objects fit in.")),(0,r.kt)("h2",{id:"string-conversion"},"String Conversion"),(0,r.kt)("p",null,"String conversion happens when we need the string form of a value."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log(value)")," does it to show the value."),(0,r.kt)("p",null,"We can also call the ",(0,r.kt)("inlineCode",{parentName:"p"},"String(value)")," function to convert a value to a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let value = true;\nconsole.log(typeof value); // boolean\n\nvalue = String(value); // now value is a string "true"\nconsole.log(typeof value); // string\n')),(0,r.kt)("p",null,"String conversion is mostly obvious. A ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},'"false"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},'"null"'),", etc."),(0,r.kt)("h2",{id:"numeric-conversion"},"Numeric Conversion"),(0,r.kt)("p",null,"Numeric conversion in mathematical functions and expressions happens automatically."),(0,r.kt)("p",null,"For example, when division ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," is applied to non-numbers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'console.log( "6" / "2" ); // 3, strings are converted to numbers\n')),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Number(value)")," function to explicitly convert a ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to a number:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'let str = "123";\nconsole.log(typeof str); // string\n\nlet num = Number(str); // becomes a number 123\n\nconsole.log(typeof num); // number\n')),(0,r.kt)("p",null,"Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered."),(0,r.kt)("p",null,"If the string is not a valid number, the result of such a conversion is ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN"),". For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'let age = Number("an arbitrary string instead of a number");\n\nconsole.log(age); // NaN, conversion failed\n')),(0,r.kt)("p",null,"Numeric conversion rules:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Becomes..."))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NaN"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"true","\xa0","and","\xa0","false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Whitespaces (includes spaces, tabs ",(0,r.kt)("inlineCode",{parentName:"td"},"\\t"),", newlines ",(0,r.kt)("inlineCode",{parentName:"td"},"\\n")," etc.) from the start and end are removed. If the remaining string is empty, the result is ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),'. Otherwise, the number is "read" from the string. An error gives ',(0,r.kt)("inlineCode",{parentName:"td"},"NaN"),".")))),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'console.log( Number("   123   ") ); // 123\nconsole.log( Number("123z") );      // NaN (error reading a number at "z")\nconsole.log( Number(true) );        // 1\nconsole.log( Number(false) );       // 0\n')),(0,r.kt)("p",null,"Please note that ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," behave differently here: ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," becomes zero while ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN"),"."),(0,r.kt)("p",null,"Most mathematical operators also perform such conversion, we'll see that in the next chapter."),(0,r.kt)("h2",{id:"boolean-conversion"},"Boolean Conversion"),(0,r.kt)("p",null,"Boolean conversion is the simplest one."),(0,r.kt)("p",null,"It happens in logical operations (later we'll meet condition tests and other similar things) but can also be performed explicitly with a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean(value)"),"."),(0,r.kt)("p",null,"The conversion rule:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Values that are intuitively "empty", like ',(0,r.kt)("inlineCode",{parentName:"li"},"0"),", an empty string, ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"NaN"),", become ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},"Other values become ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'console.log( Boolean(1) ); // true\nconsole.log( Boolean(0) ); // false\n\nconsole.log( Boolean("hello") ); // true\nconsole.log( Boolean("") ); // false\n')),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Please note: the string with zero ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},'\\"0\\"')," is ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"true")),(0,r.kt)("p",{parentName:"admonition"},"Some languages (namely PHP) treat ",(0,r.kt)("inlineCode",{parentName:"p"},'"0"')," as ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". But in JavaScript, a non-empty string is always ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},'console.log( Boolean("0") ); // true\nconsole.log( Boolean(" ") ); // spaces, also true (any non-empty string is true)\n'))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"The three most widely used type conversions are to string, to number, and to boolean."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"String Conversion"))," -- Occurs when we output something. Can be performed with ",(0,r.kt)("inlineCode",{parentName:"p"},"String(value)"),". The conversion to string is usually obvious for primitive values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Numeric Conversion"))," -- Occurs in math operations. Can be performed with ",(0,r.kt)("inlineCode",{parentName:"p"},"Number(value)"),"."),(0,r.kt)("p",null,"The conversion follows the rules:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Becomes..."))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NaN"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"true","\xa0","/","\xa0","false")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1 / 0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},'The string is read "as is", whitespaces (includes spaces, tabs ',(0,r.kt)("inlineCode",{parentName:"td"},"\\t"),", newlines ",(0,r.kt)("inlineCode",{parentName:"td"},"\\n")," etc.) from both sides are ignored. An empty string becomes ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),". An error gives ",(0,r.kt)("inlineCode",{parentName:"td"},"NaN"),".")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Boolean Conversion"))," -- Occurs in logical operations. Can be performed with ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean(value)"),"."),(0,r.kt)("p",null,"Follows the rules:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Becomes..."))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"NaN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"any other value"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))))),(0,r.kt)("p",null,"Most of these rules are easy to understand and memorize. The notable exceptions where people usually make mistakes are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"undefined")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"NaN")," as a number, not ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"0"')," and space-only strings like ",(0,r.kt)("inlineCode",{parentName:"li"},'"   "')," are true as a boolean.")),(0,r.kt)("p",null,"Objects aren't covered here. We'll return to them later in the chapter that is devoted exclusively to objects after we learn more basic things about JavaScript."))}d.isMDXComponent=!0}}]);