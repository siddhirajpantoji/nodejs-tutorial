"use strict";(self.webpackChunknode_tutorial=self.webpackChunknode_tutorial||[]).push([[998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||o;return n?a.createElement(d,r(r({ref:t},p),{},{components:n})):a.createElement(d,r({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={id:"switch",title:"Switch Case",sidebar_label:"Switch case",slug:"/switch"},r='The "switch" statement',l={unversionedId:"Basics/switch",id:"Basics/switch",title:"Switch Case",description:"A switch statement can replace multiple if checks.",source:"@site/docs/Basics/switch.md",sourceDirName:"Basics",slug:"/switch",permalink:"/nodejs-tutorial/docs/switch",draft:!1,tags:[],version:"current",frontMatter:{id:"switch",title:"Switch Case",sidebar_label:"Switch case",slug:"/switch"},sidebar:"tutorialSidebar",previous:{title:"Loops",permalink:"/nodejs-tutorial/docs/loops"},next:{title:"Functions",permalink:"/nodejs-tutorial/docs/basic-functions"}},s={},c=[{value:"The syntax",id:"the-syntax",level:2},{value:"An example",id:"an-example",level:2},{value:"Grouping of &quot;case&quot;",id:"grouping-of-case",level:2},{value:"Type matters",id:"type-matters",level:2}],p={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-switch-statement"},'The "switch" statement'),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," statement can replace multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," checks."),(0,i.kt)("p",null,"It gives a more descriptive way to compare a value with multiple variants."),(0,i.kt)("h2",{id:"the-syntax"},"The syntax"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," has one or more ",(0,i.kt)("inlineCode",{parentName:"p"},"case")," blocks and an optional default."),(0,i.kt)("p",null,"It looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"switch(x) {\n  case 'value1':  // if (x === 'value1')\n    ...\n    [break]\n\n  case 'value2':  // if (x === 'value2')\n    ...\n    [break]\n\n  default:\n    ...\n    [break]\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The value of ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," is checked for a strict equality ",(0,i.kt)("inlineCode",{parentName:"li"},"===")," to the value from the first ",(0,i.kt)("inlineCode",{parentName:"li"},"case")," (that is, ",(0,i.kt)("inlineCode",{parentName:"li"},"value1"),") then to the second (",(0,i.kt)("inlineCode",{parentName:"li"},"value2"),") and so on."),(0,i.kt)("li",{parentName:"ul"},"If the equality is found, ",(0,i.kt)("inlineCode",{parentName:"li"},"switch")," starts to execute the code starting from the corresponding ",(0,i.kt)("inlineCode",{parentName:"li"},"case"),", until the nearest ",(0,i.kt)("inlineCode",{parentName:"li"},"break")," (or until the end of ",(0,i.kt)("inlineCode",{parentName:"li"},"switch"),")."),(0,i.kt)("li",{parentName:"ul"},"If no case is matched then the ",(0,i.kt)("inlineCode",{parentName:"li"},"default")," code is executed (if it exists).")),(0,i.kt)("h2",{id:"an-example"},"An example"),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/siddhirajpantoji/nodejs-tutorial/blob/main/static/code-snippets/switch-examples/simple-switch.js"},"example"))," of ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," (the executed code is highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let a = 2 + 2;\n\nswitch (a) {\n  case 3:\n    console.log( 'Too small' );\n    break;\n// highlight-start\n  case 4:\n    console.log( 'Exactly!' );\n    break;\n// highlight-end\n  case 5:\n    console.log( 'Too big' );\n    break;\n  default:\n    console.log( \"I don't know such values\" );\n}\n")),(0,i.kt)("p",null,"Here the ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," starts to compare ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," from the first ",(0,i.kt)("inlineCode",{parentName:"p"},"case")," variant that is ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),". The match fails."),(0,i.kt)("p",null,"Then ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),". That's a match, so the execution starts from ",(0,i.kt)("inlineCode",{parentName:"p"},"case 4")," until the nearest ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"If there is no ",(0,i.kt)("inlineCode",{parentName:"strong"},"break")," then the execution continues with the next ",(0,i.kt)("inlineCode",{parentName:"strong"},"case")," without any checks.")),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},(0,i.kt)("a",{parentName:"em",href:"https://github.com/siddhirajpantoji/nodejs-tutorial/blob/main/static/code-snippets/switch-examples/switch-without-break.js"},"example")))," without ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"run",run:!0},"let a = 2 + 2;\n\nswitch (a) {\n  case 3:\n    console.log( 'Too small' );\n// highlight-start\n  case 4:\n    console.log( 'Exactly!' );\n  case 5:\n    console.log( 'Too big' );\n  default:\n    console.log( \"I don't know such values\" );\n// highlight-end\n}\n")),(0,i.kt)("p",null,"In the example above we'll see sequential execution of three ",(0,i.kt)("inlineCode",{parentName:"p"},"console.log"),"s:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"console.log( 'Exactly!' );\nconsole.log( 'Too big' );\nconsole.log( \"I don't know such values\" );\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Any expression can be a ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"switch/case")," argument"),(0,i.kt)("p",{parentName:"admonition"},"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"case")," allow arbitrary expressions."),(0,i.kt)("p",{parentName:"admonition"},"For ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},(0,i.kt)("a",{parentName:"em",href:"https://github.com/siddhirajpantoji/nodejs-tutorial/blob/main/static/code-snippets/switch-examples/switch-arbitary.js"},"example")))),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'let a = "1";\nlet b = 0;\n\nswitch (+a) {\n// highlight-start\n  case b + 1:\n    console.log("this runs, because +a is 1, exactly equals b+1");\n    break;\n// highlight-start\n\n  default:\n    console.log("this doesn\'t run");\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Here ",(0,i.kt)("inlineCode",{parentName:"p"},"+a")," gives ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", that's compared with ",(0,i.kt)("inlineCode",{parentName:"p"},"b + 1")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"case"),", and the corresponding code is executed.")),(0,i.kt)("h2",{id:"grouping-of-case"},'Grouping of "case"'),(0,i.kt)("p",null,"Several variants of ",(0,i.kt)("inlineCode",{parentName:"p"},"case")," which share the same code can be grouped."),(0,i.kt)("p",null,"For ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},(0,i.kt)("a",{parentName:"em",href:"https://github.com/siddhirajpantoji/nodejs-tutorial/blob/main/static/code-snippets/switch-examples/switch-case-group.js"},"example"))),", if we want the same code to run for ",(0,i.kt)("inlineCode",{parentName:"p"},"case 3")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"case 5"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let a = 3;\n\nswitch (a) {\n  case 4:\n    console.log('Right!');\n    break;\n\n// highlight-start\n  case 3: // (*) grouped two cases\n  case 5:\n    console.log('Wrong!');\n    console.log(\"Why don't you take a math class?\");\n    break;\n// highlight-end\n\n  default:\n    console.log('The result is strange. Really.');\n}\n")),(0,i.kt)("p",null,"Now both ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"5")," show the same message."),(0,i.kt)("p",null,'The ability to "group" cases is a side effect of how ',(0,i.kt)("inlineCode",{parentName:"p"},"switch/case")," works without ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),". Here the execution of ",(0,i.kt)("inlineCode",{parentName:"p"},"case 3")," starts from the line ",(0,i.kt)("inlineCode",{parentName:"p"},"(*)")," and goes through ",(0,i.kt)("inlineCode",{parentName:"p"},"case 5"),", because there's no ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),"."),(0,i.kt)("h2",{id:"type-matters"},"Type matters"),(0,i.kt)("p",null,"Let's emphasize that the equality check is always strict. The values must be of the same type to match."),(0,i.kt)("p",null,"For example, let's consider the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let arg = process.argv[2] // pass as an Argument while executing \nswitch (arg) {\n  case '0':\n  case '1':\n    console.log( 'One or zero' );\n    break;\n\n  case '2':\n    console.log( 'Two' );\n    break;\n\n  case 3:\n    console.log( 'Never executes!' );\n    break;\n  default:\n    console.log( 'An unknown value' );\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node switch-type-check.js 0\nnode switch-type-check.js 1\nnode switch-type-check.js 2\nnode switch-type-check.js 3\n\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"For ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", the first ",(0,i.kt)("inlineCode",{parentName:"li"},"console.log")," runs."),(0,i.kt)("li",{parentName:"ol"},"For ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," the second ",(0,i.kt)("inlineCode",{parentName:"li"},"console.log")," runs."),(0,i.kt)("li",{parentName:"ol"},"But for ",(0,i.kt)("inlineCode",{parentName:"li"},"3"),", the result of the ",(0,i.kt)("inlineCode",{parentName:"li"},"process.argv[2]")," is a string ",(0,i.kt)("inlineCode",{parentName:"li"},'"3"'),", which is not strictly equal ",(0,i.kt)("inlineCode",{parentName:"li"},"===")," to the number ",(0,i.kt)("inlineCode",{parentName:"li"},"3"),". So we've got a dead code in ",(0,i.kt)("inlineCode",{parentName:"li"},"case 3"),"! The ",(0,i.kt)("inlineCode",{parentName:"li"},"default")," variant will execute.")))}h.isMDXComponent=!0}}]);