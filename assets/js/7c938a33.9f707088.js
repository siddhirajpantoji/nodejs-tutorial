"use strict";(self.webpackChunknode_tutorial=self.webpackChunknode_tutorial||[]).push([[806],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=l,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||o;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const o={id:"logical-operators",title:"Logical Operators",sidebar_label:"Logical Operators",slug:"/logical-operators"},r="Logical operators",i={unversionedId:"Basics/logical-operators",id:"Basics/logical-operators",title:"Logical Operators",description:"There are three logical operators in JavaScript: || (OR), && (AND), ! (NOT)",source:"@site/docs/Basics/logical-operators.md",sourceDirName:"Basics",slug:"/logical-operators",permalink:"/nodejs-tutorial/docs/logical-operators",draft:!1,tags:[],version:"current",frontMatter:{id:"logical-operators",title:"Logical Operators",sidebar_label:"Logical Operators",slug:"/logical-operators"},sidebar:"tutorialSidebar",previous:{title:"If Else",permalink:"/nodejs-tutorial/docs/if-else"}},s={},p=[{value:"|| (OR)",id:"-or",level:2},{value:"OR &quot;||&quot; finds the first truthy value #or-finds-the-first-truthy-value",id:"or--finds-the-first-truthy-value-or-finds-the-first-truthy-value",level:2},{value:"&amp;&amp; (AND)",id:"-and",level:2},{value:"AND &quot;&amp;&amp;&quot; finds the first falsy value",id:"and--finds-the-first-falsy-value",level:2},{value:"! (NOT)",id:"-not",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"logical-operators"},"Logical operators"),(0,l.kt)("p",null,"There are three logical operators in JavaScript: ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," (OR), ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," (AND), ",(0,l.kt)("inlineCode",{parentName:"p"},"!")," (NOT)"),(0,l.kt)("p",null,'Although they are called "logical", they can be applied to values of any type, not only boolean. Their result can also be of any type.'),(0,l.kt)("p",null,"Let's see the details."),(0,l.kt)("h2",{id:"-or"},"|| (OR)"),(0,l.kt)("p",null,'The "OR" operator is represented with two vertical line symbols:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"result = a || b;\n")),(0,l.kt)("p",null,"In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", otherwise it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"In JavaScript, the operator is a little bit trickier and more powerful. But first, let's see what happens with boolean values."),(0,l.kt)("p",null,"There are four possible logical combinations:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( true || true );   // true\nconsole.log( false || true );  // true\nconsole.log( true || false );  // true\nconsole.log( false || false ); // false\n")),(0,l.kt)("p",null,"As we can see, the result is always ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," except for the case when both operands are ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"If an operand is not a boolean, it's converted to a boolean for the evaluation."),(0,l.kt)("p",null,"For instance, the number ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," is treated as ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", the number ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"if (1 || 0) { // works just like if( true || false )\n  console.log( 'truthy!' );\n}\n")),(0,l.kt)("p",null,"Most of the time, OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," is used in an ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," statement to test if ",(0,l.kt)("em",{parentName:"p"},"any")," of the given conditions is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let hour = 9;\n// highlight-next-line\nif (hour < 10 || hour > 18) {\n\n  console.log( 'The office is closed.' );\n}\n")),(0,l.kt)("p",null,"We can pass more conditions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let hour = 12;\nlet isWeekend = true;\n\nif (hour < 10 || hour > 18 || isWeekend) {\n  console.log( 'The office is closed.' ); // it is the weekend\n}\n")),(0,l.kt)("h2",{id:"or--finds-the-first-truthy-value-or-finds-the-first-truthy-value"},'OR "||" finds the first truthy value ',"[#or-finds-the-first-truthy-value]"),(0,l.kt)("p",null,'The logic described above is somewhat classical. Now, let\'s bring in the "extra" features of JavaScript.'),(0,l.kt)("p",null,"The extended algorithm works as follows."),(0,l.kt)("p",null,"Given multiple OR'ed values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"result = value1 || value2 || value3;\n")),(0,l.kt)("p",null,"The OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," operator does the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Evaluates operands from left to right."),(0,l.kt)("li",{parentName:"ul"},"For each operand, converts it to boolean. If the result is ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),", stops and returns the original value of that operand."),(0,l.kt)("li",{parentName:"ul"},"If all operands have been evaluated (i.e. all were ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"), returns the last operand.")),(0,l.kt)("p",null,"A value is returned in its original form, without the conversion."),(0,l.kt)("p",null,"In other words, a chain of OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," returns the first truthy value or the last one if no truthy value is found."),(0,l.kt)("p",null,"For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( 1 || 0 ); // 1 (1 is truthy)\n\nconsole.log( null || 1 ); // 1 (1 is the first truthy value)\nconsole.log( null || 0 || 1 ); // 1 (the first truthy value)\n\nconsole.log( undefined || null || 0 ); // 0 (all falsy, returns the last value)\n")),(0,l.kt)("p",null,'This leads to some interesting usage compared to a "pure, classical, boolean-only OR".'),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Getting the first truthy value from a list of variables or expressions.")),(0,l.kt)("p",{parentName:"li"},"For instance, we have ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nickName")," variables, all optional (i.e. can be undefined or have falsy values)."),(0,l.kt)("p",{parentName:"li"},"Let's use OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," to choose the one that has the data and show it (or ",(0,l.kt)("inlineCode",{parentName:"p"},'"Anonymous"')," if nothing set):"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'let firstName = "";\nlet lastName = "";\nlet nickName = "SuperCoder";\n\n// highlight-next-line \nconsole.log( firstName || lastName || nickName || "Anonymous"); // SuperCoder\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'If all variables were falsy, `"Anonymous"` would show up.\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Short-circuit evaluation.")),(0,l.kt)("p",{parentName:"li"},"Another feature of OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||"),' operator is the so-called "short-circuit" evaluation.'),(0,l.kt)("p",{parentName:"li"},"It means that ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument."),(0,l.kt)("p",{parentName:"li"},"The importance of this feature becomes obvious if an operand isn't just a value, but an expression with a side effect, such as a variable assignment or a function call."),(0,l.kt)("p",{parentName:"li"},"In the example below, only the second message is printed:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"no-beautify","no-beautify":!0},'true || console.log("not printed");\nfalse || console.log("printed");\n')),(0,l.kt)("p",{parentName:"li"},"In the first line, the OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," operator stops the evaluation immediately upon seeing ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", so the ",(0,l.kt)("inlineCode",{parentName:"p"},"console.log")," isn't run."),(0,l.kt)("p",{parentName:"li"},"Sometimes, people use this feature to execute commands only if the condition on the left part is falsy."))),(0,l.kt)("h2",{id:"-and"},"&& (AND)"),(0,l.kt)("p",null,"The AND operator is represented with two ampersands ",(0,l.kt)("inlineCode",{parentName:"p"},"&&"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"result = a && b;\n")),(0,l.kt)("p",null,"In classical programming, AND returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if both operands are truthy and ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( true && true );   // true\nconsole.log( false && true );  // false\nconsole.log( true && false );  // false\nconsole.log( false && false ); // false\n")),(0,l.kt)("p",null,"An example with ",(0,l.kt)("inlineCode",{parentName:"p"},"if"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let hour = 12;\nlet minute = 30;\n\nif (hour == 12 && minute == 30) {\n  console.log( 'The time is 12:30' );\n}\n")),(0,l.kt)("p",null,"Just as with OR, any value is allowed as an operand of AND:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'if (1 && 0) { // evaluated as true && false\n  console.log( "won\'t work, because the result is falsy" );\n}\n')),(0,l.kt)("h2",{id:"and--finds-the-first-falsy-value"},'AND "&&" finds the first falsy value'),(0,l.kt)("p",null,"Given multiple AND'ed values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"result = value1 && value2 && value3;\n")),(0,l.kt)("p",null,"The AND ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," operator does the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Evaluates operands from left to right."),(0,l.kt)("li",{parentName:"ul"},"For each operand, converts it to a boolean. If the result is ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),", stops and returns the original value of that operand."),(0,l.kt)("li",{parentName:"ul"},"If all operands have been evaluated (i.e. all were truthy), returns the last operand.")),(0,l.kt)("p",null,"In other words, AND returns the first falsy value or the last value if none were found."),(0,l.kt)("p",null,"The rules above are similar to OR. The difference is that AND returns the first ",(0,l.kt)("em",{parentName:"p"},"falsy")," value while OR returns the first ",(0,l.kt)("em",{parentName:"p"},"truthy")," one."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// if the first operand is truthy,\n// AND returns the second operand:\nconsole.log( 1 && 0 ); // 0\nconsole.log( 1 && 5 ); // 5\n\n// if the first operand is falsy,\n// AND returns it. The second operand is ignored\nconsole.log( null && 5 ); // null\nconsole.log( 0 && "no matter what" ); // 0\n')),(0,l.kt)("p",null,"We can also pass several values in a row. See how the first falsy one is returned:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( 1 && 2 && null && 3 ); // null\n")),(0,l.kt)("p",null,"When all values are truthy, the last value is returned:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( 1 && 2 && 3 ); // 3, the last one\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Precedence of AND ",(0,l.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"&&")," is higher than OR ",(0,l.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"||")),(0,l.kt)("p",{parentName:"admonition"},"The precedence of AND ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," operator is higher than OR ",(0,l.kt)("inlineCode",{parentName:"p"},"||"),"."),(0,l.kt)("p",{parentName:"admonition"},"So the code ",(0,l.kt)("inlineCode",{parentName:"p"},"a && b || c && d")," is essentially the same as if the ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," expressions were in parentheses: ",(0,l.kt)("inlineCode",{parentName:"p"},"(a && b) || (c && d)"),".")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Don't replace ",(0,l.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"if")," with ",(0,l.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"||")," or ",(0,l.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"&&")),(0,l.kt)("p",{parentName:"admonition"},"Sometimes, people use the AND ",(0,l.kt)("inlineCode",{parentName:"p"},"&&"),' operator as a "shorter way to write ',(0,l.kt)("inlineCode",{parentName:"p"},"if"),'".'),(0,l.kt)("p",{parentName:"admonition"},"For instance:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let x = 1;\n\n(x > 0) && console.log( 'Greater than zero!' );\n")),(0,l.kt)("p",{parentName:"admonition"},"The action in the right part of ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," would execute only if the evaluation reaches it. That is, only if ",(0,l.kt)("inlineCode",{parentName:"p"},"(x > 0)")," is true."),(0,l.kt)("p",{parentName:"admonition"},"So we basically have an analogue for:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let x = 1;\n\nif (x > 0) console.log( 'Greater than zero!' );\n")),(0,l.kt)("p",{parentName:"admonition"},"Although, the variant with ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," appears shorter, ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," if we want ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," and use ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," if we want AND.")),(0,l.kt)("h2",{id:"-not"},"! (NOT)"),(0,l.kt)("p",null,"The boolean NOT operator is represented with an exclamation sign ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),"."),(0,l.kt)("p",null,"The syntax is pretty simple:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"result = !value;\n")),(0,l.kt)("p",null,"The operator accepts a single argument and does the following:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Converts the operand to boolean type: ",(0,l.kt)("inlineCode",{parentName:"li"},"true/false"),"."),(0,l.kt)("li",{parentName:"ol"},"Returns the inverse value.")),(0,l.kt)("p",null,"For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log( !true ); // false\nconsole.log( !0 ); // true\n")),(0,l.kt)("p",null,"A double NOT ",(0,l.kt)("inlineCode",{parentName:"p"},"!!")," is sometimes used for converting a value to boolean type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'console.log( !!"non-empty string" ); // true\nconsole.log( !!null ); // false\n')),(0,l.kt)("p",null,"That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion."),(0,l.kt)("p",null,"There's a little more verbose way to do the same thing -- a built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"Boolean")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'console.log( Boolean("non-empty string") ); // true\nconsole.log( Boolean(null) ); // false\n')),(0,l.kt)("p",null,"The precedence of NOT ",(0,l.kt)("inlineCode",{parentName:"p"},"!")," is the highest of all logical operators, so it always executes first, before ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"||"),"."))}d.isMDXComponent=!0}}]);