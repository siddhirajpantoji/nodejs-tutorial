"use strict";(self.webpackChunknode_tutorial=self.webpackChunknode_tutorial||[]).push([[177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:o,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},394:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const l={id:"if-else",title:"If Else",sidebar_label:"If Else",slug:"/if-else"},i="Conditional branching: if, '?'",r={unversionedId:"Basics/if-else",id:"Basics/if-else",title:"If Else",description:"Sometimes, we need to perform different actions based on different conditions.",source:"@site/docs/Basics/if-else.md",sourceDirName:"Basics",slug:"/if-else",permalink:"/nodejs-tutorial/docs/if-else",draft:!1,tags:[],version:"current",frontMatter:{id:"if-else",title:"If Else",sidebar_label:"If Else",slug:"/if-else"},sidebar:"tutorialSidebar",previous:{title:"Comparisons",permalink:"/nodejs-tutorial/docs/comparison"},next:{title:"Logical Operators",permalink:"/nodejs-tutorial/docs/logical-operators"}},s={},p=[{value:"The &quot;if&quot; statement",id:"the-if-statement",level:2},{value:"Boolean conversion",id:"boolean-conversion",level:2},{value:"The &quot;else&quot; clause",id:"the-else-clause",level:2},{value:"Several conditions: &quot;else if&quot;",id:"several-conditions-else-if",level:2},{value:"Conditional operator &#39;?&#39;",id:"conditional-operator-",level:2},{value:"Multiple &#39;?&#39;",id:"multiple-",level:2},{value:"Non-traditional use of &#39;?&#39;",id:"non-traditional-use-of-",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"conditional-branching-if-"},"Conditional branching: if, '?'"),(0,o.kt)("p",null,"Sometimes, we need to perform different actions based on different conditions."),(0,o.kt)("p",null,"To do that, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement and the conditional operator ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),', that\'s also called a "question mark" operator.'),(0,o.kt)("h2",{id:"the-if-statement"},'The "if" statement'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"if(...)")," statement evaluates a condition in parentheses and, if the result is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", executes a block of code."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let year = prompt('In which year was ECMAScript-2015 specification published?', '');\n\n// highlight-start\nif (year == 2015) console.log( 'You are right!' );\n// highlight-end\n")),(0,o.kt)("p",null,"In the example above, the condition is a simple equality check (",(0,o.kt)("inlineCode",{parentName:"p"},"year == 2015"),"), but it can be much more complex."),(0,o.kt)("p",null,"If we want to execute more than one statement, we have to wrap our code block inside curly braces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'if (year == 2015) {\n  console.log( "That\'s correct!" );\n  console.log( "You\'re so smart!" );\n}\n')),(0,o.kt)("p",null,"We recommend wrapping your code block with curly braces ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," every time you use an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement, even if there is only one statement to execute. Doing so improves readability."),(0,o.kt)("h2",{id:"boolean-conversion"},"Boolean conversion"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"if (\u2026)")," statement evaluates the expression in its parentheses and converts the result to a boolean."),(0,o.kt)("p",null,"Let's recall the conversion rules from the chapter <info:type-conversions>:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A number ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),", an empty string ",(0,o.kt)("inlineCode",{parentName:"li"},'""'),", ",(0,o.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"NaN")," all become ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),'. Because of that they are called "falsy" values.'),(0,o.kt)("li",{parentName:"ul"},"Other values become ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),', so they are called "truthy".')),(0,o.kt)("p",null,"So, the code under this condition would never execute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"if (0) { // 0 is falsy\n  ...\n}\n")),(0,o.kt)("p",null,"...and inside this condition -- it always will:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"if (1) { // 1 is truthy\n  ...\n}\n")),(0,o.kt)("p",null,"We can also pass a pre-evaluated boolean value to ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),", like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let cond = (year == 2015); // equality evaluates to true or false\n\nif (cond) {\n  ...\n}\n")),(0,o.kt)("h2",{id:"the-else-clause"},'The "else" clause'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement may contain an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," block. It executes when the condition is falsy."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let year = prompt('In which year was the ECMAScript-2015 specification published?', '');\n\nif (year == 2015) {\n  console.log( 'You guessed it right!' );\n} else {\n  console.log( 'How can you be so wrong?' ); // any value except 2015\n}\n")),(0,o.kt)("h2",{id:"several-conditions-else-if"},'Several conditions: "else if"'),(0,o.kt)("p",null,"Sometimes, we'd like to test several variants of a condition. The ",(0,o.kt)("inlineCode",{parentName:"p"},"else if")," clause lets us do that."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let year = prompt('In which year was the ECMAScript-2015 specification published?', '');\n\nif (year < 2015) {\n  console.log( 'Too early...' );\n} else if (year > 2015) {\n  console.log( 'Too late' );\n} else {\n  console.log( 'Exactly!' );\n}\n")),(0,o.kt)("p",null,"In the code above, JavaScript first checks ",(0,o.kt)("inlineCode",{parentName:"p"},"year < 2015"),". If that is falsy, it goes to the next condition ",(0,o.kt)("inlineCode",{parentName:"p"},"year > 2015"),". If that is also falsy, it shows the last ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log"),"."),(0,o.kt)("p",null,"There can be more ",(0,o.kt)("inlineCode",{parentName:"p"},"else if")," blocks. The final ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," is optional."),(0,o.kt)("h2",{id:"conditional-operator-"},"Conditional operator '?'"),(0,o.kt)("p",null,"Sometimes, we need to assign a variable depending on a condition."),(0,o.kt)("p",null,"For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"no-beautify","no-beautify":!0},"let accessAllowed;\nlet age = prompt('How old are you?', '');\n\n// highlight-start\nif (age > 18) {\n  accessAllowed = true;\n} else {\n  accessAllowed = false;\n}\n// highlight-end\n\nconsole.log(accessAllowed);\n")),(0,o.kt)("p",null,'The so-called "conditional" or "question mark" operator lets us do that in a shorter and simpler way.'),(0,o.kt)("p",null,"The operator is represented by a question mark ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),'. Sometimes it\'s called "ternary", because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.'),(0,o.kt)("p",null,"The syntax is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let result = condition ? value1 : value2;\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"condition")," is evaluated: if it's truthy then ",(0,o.kt)("inlineCode",{parentName:"p"},"value1")," is returned, otherwise -- ",(0,o.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let accessAllowed = (age > 18) ? true : false;\n")),(0,o.kt)("p",null,"Technically, we can omit the parentheses around ",(0,o.kt)("inlineCode",{parentName:"p"},"age > 18"),". The question mark operator has a low precedence, so it executes after the comparison ",(0,o.kt)("inlineCode",{parentName:"p"},">"),"."),(0,o.kt)("p",null,"This example will do the same thing as the previous one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// the comparison operator "age > 18" executes first anyway\n// (no need to wrap it into parentheses)\nlet accessAllowed = age > 18 ? true : false;\n')),(0,o.kt)("p",null,"But parentheses make the code more readable, so we recommend using them."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In the example above, you can avoid using the question mark operator because the comparison itself returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true/false"),":"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// the same\nlet accessAllowed = age > 18;\n"))),(0,o.kt)("h2",{id:"multiple-"},"Multiple '?'"),(0,o.kt)("p",null,"A sequence of question mark operators ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," can return a value that depends on more than one condition."),(0,o.kt)("p",null,"For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let age = prompt('age?', 18);\n\nlet message = (age < 3) ? 'Hi, baby!' :\n  (age < 18) ? 'Hello!' :\n  (age < 100) ? 'Greetings!' :\n  'What an unusual age!';\n\nconsole.log( message );\n")),(0,o.kt)("p",null,"It may be difficult at first to grasp what's going on. But after a closer look, we can see that it's just an ordinary sequence of tests:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The first question mark checks whether ",(0,o.kt)("inlineCode",{parentName:"li"},"age < 3"),"."),(0,o.kt)("li",{parentName:"ol"},"If true -- it returns ",(0,o.kt)("inlineCode",{parentName:"li"},"'Hi, baby!'"),'. Otherwise, it continues to the expression after the colon ":", checking ',(0,o.kt)("inlineCode",{parentName:"li"},"age < 18"),"."),(0,o.kt)("li",{parentName:"ol"},"If that's true -- it returns ",(0,o.kt)("inlineCode",{parentName:"li"},"'Hello!'"),'. Otherwise, it continues to the expression after the next colon ":", checking ',(0,o.kt)("inlineCode",{parentName:"li"},"age < 100"),"."),(0,o.kt)("li",{parentName:"ol"},"If that's true -- it returns ",(0,o.kt)("inlineCode",{parentName:"li"},"'Greetings!'"),'. Otherwise, it continues to the expression after the last colon ":", returning ',(0,o.kt)("inlineCode",{parentName:"li"},"'What an unusual age!'"),".")),(0,o.kt)("p",null,"Here's how this looks using ",(0,o.kt)("inlineCode",{parentName:"p"},"if..else"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"if (age < 3) {\n  message = 'Hi, baby!';\n} else if (age < 18) {\n  message = 'Hello!';\n} else if (age < 100) {\n  message = 'Greetings!';\n} else {\n  message = 'What an unusual age!';\n}\n")),(0,o.kt)("h2",{id:"non-traditional-use-of-"},"Non-traditional use of '?'"),(0,o.kt)("p",null,"Sometimes the question mark ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," is used as a replacement for ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"no-beautify","no-beautify":!0},"let company = prompt('Which company created JavaScript?', '');\n\n// highlight-start\n(company == 'Netscape') ?\n   console.log('Right!') : console.log('Wrong.');\n// highlight-end\n")),(0,o.kt)("p",null,"Depending on the condition ",(0,o.kt)("inlineCode",{parentName:"p"},"company == 'Netscape'"),", either the first or the second expression after the ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," gets executed and shows an console.log."),(0,o.kt)("p",null,"We don't assign a result to a variable here. Instead, we execute different code depending on the condition."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"It's not recommended to use the question mark operator in this way.")),(0,o.kt)("p",null,"The notation is shorter than the equivalent ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement, which appeals to some programmers. But it is less readable."),(0,o.kt)("p",null,"Here is the same code using ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," for comparison:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"no-beautify","no-beautify":!0},"let company = prompt('Which company created JavaScript?', '');\n\n// highlight-start\nif (company == 'Netscape') {\n  console.log('Right!');\n} else {\n  console.log('Wrong.');\n}\n// highlight-end\n")),(0,o.kt)("p",null,"Our eyes scan the code vertically. Code blocks which span several lines are easier to understand than a long, horizontal instruction set."),(0,o.kt)("p",null,"The purpose of the question mark operator ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," is to return one value or another depending on its condition. Please use it for exactly that. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," when you need to execute different branches of code."))}d.isMDXComponent=!0}}]);